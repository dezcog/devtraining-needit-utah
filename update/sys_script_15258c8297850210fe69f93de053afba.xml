<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>true</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_58872_needit_my_custom_table</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>populateRequests</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function populateRequests(current, previous /*null when async*/) {

    // Create a new GlideRecord object for the target table
    var newRecord = new GlideRecord('x_58872_needit_my_custom_table_requests');
	var gr        = new GlideRecord('x_58872_needit_my_custom_table_requests');
	
	// First, let's delete the entries for this SOW
    gr.addQuery('sow_number', current.number);

    // Execute the query to find matching records
    gr.query();

    // Iterate through matching records
    while (gr.next()) {
        // Delete each record
		gs.info('remving record ' + gr.number);
        gr.deleteRecord();
    }
    
    // Set field values for the new record
    newRecord.initialize(); // Initializes a new record
    newRecord.setValue('sow_number'     , current.number);
    newRecord.setValue('skillset'       , current.u_data_request1);
	newRecord.setValue('requested_hours', current.u_data_request1_hours);
    
    // Insert the new record
    var newRecordID = newRecord.insert();
    
    // Check if the record was inserted successfully
    if (newRecordID) {
        gs.info('New record inserted with sys_id: ' + newRecordID);
    } else {
        gs.error('Failed to insert new record');
    }
	
	// Set field values for the new record
    newRecord.initialize(); // Initializes a new record
    newRecord.setValue('sow_number'     , current.number);
    newRecord.setValue('skillset'       , current.u_data_request2);
	newRecord.setValue('requested_hours', current.u_data_request2_hours);
    
    // Insert the new record
    newRecordID = newRecord.insert();
    
    // Check if the record was inserted successfully
    if (newRecordID) {
        gs.info('New record inserted with sys_id: ' + newRecordID);
    } else {
        gs.error('Failed to insert new record');
    }

})(current, previous);
]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-03-21 03:09:21</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>15258c8297850210fe69f93de053afba</sys_id>
        <sys_mod_count>6</sys_mod_count>
        <sys_name>populateRequests</sys_name>
        <sys_overrides/>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy/>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sys_script_15258c8297850210fe69f93de053afba</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-03-21 03:39:51</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=15258c8297850210fe69f93de053afba"/>
</record_update>
